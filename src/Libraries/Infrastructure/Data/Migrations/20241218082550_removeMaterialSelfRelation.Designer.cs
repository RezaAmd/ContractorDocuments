// <auto-generated />
using System;
using ContractorDocuments.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ContractorDocuments.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241218082550_removeMaterialSelfRelation")]
    partial class removeMaterialSelfRelation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ContractorDocuments.Domain.Entities.Catalogs.CategoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RelevantEntityTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("ParentId");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("ContractorDocuments.Domain.Entities.Customers.ContractorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Contractors", (string)null);
                });

            modelBuilder.Entity("ContractorDocuments.Domain.Entities.Customers.ContractorPhoneEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContractorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("ContractorId");

                    b.ToTable("ContractorPhones", (string)null);
                });

            modelBuilder.Entity("ContractorDocuments.Domain.Entities.Customers.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("ContractorDocuments.Domain.Entities.Directory.MeasureEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SystemKeyword")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Measures", (string)null);
                });

            modelBuilder.Entity("ContractorDocuments.Domain.Entities.Equipment.EquipmentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Equipments", (string)null);
                });

            modelBuilder.Entity("ContractorDocuments.Domain.Entities.Materials.MaterialEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MeasureEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MeasureEntityId");

                    b.ToTable("Materials", (string)null);
                });

            modelBuilder.Entity("ContractorDocuments.Domain.Entities.Projects.ConstructStageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("ProjectTypeId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("ConstructStages", (string)null);
                });

            modelBuilder.Entity("ContractorDocuments.Domain.Entities.Projects.ProjectContractEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DECIMAL(16,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("ContractTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("SharePercentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.HasKey("Id");

                    b.ToTable("ProjectContracts", (string)null);
                });

            modelBuilder.Entity("ContractorDocuments.Domain.Entities.Projects.ProjectEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContractId")
                        .HasMaxLength(15)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("EndOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("DECIMAL(9, 6)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("DECIMAL(9, 6)");

                    b.Property<int>("ProjectTypeId")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ContractId")
                        .IsUnique();

                    b.ToTable("Projects", (string)null);
                });

            modelBuilder.Entity("ContractorDocuments.Domain.Entities.Projects.ProjectStageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConstructStageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ConstructStageId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectStages", (string)null);
                });

            modelBuilder.Entity("ContractorDocuments.Domain.Entities.Projects.ProjectStageEquipmentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRent")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProjectStageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime?>("RentEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RentStartTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalCost")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("ProjectStageId");

                    b.ToTable("ProjectStageEquipments", (string)null);
                });

            modelBuilder.Entity("ContractorDocuments.Domain.Entities.Projects.ProjectStageExpenseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("PaidOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProjectStageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectStageId");

                    b.ToTable("ProjectStageExpenses", (string)null);
                });

            modelBuilder.Entity("ContractorDocuments.Domain.Entities.Projects.ProjectStageMaterialEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectStepId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PurchacedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalNetProfit")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TransportCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("ProjectStepId");

                    b.ToTable("ProjectStageMaterials", (string)null);
                });

            modelBuilder.Entity("ContractorDocuments.Domain.Entities.Catalogs.CategoryEntity", b =>
                {
                    b.HasOne("ContractorDocuments.Domain.Entities.Catalogs.CategoryEntity", "Parent")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ContractorDocuments.Domain.Entities.Customers.ContractorEntity", b =>
                {
                    b.OwnsOne("ContractorDocuments.Domain.ValueObjects.Fullname", "Fullname", b1 =>
                        {
                            b1.Property<Guid>("ContractorEntityId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Name");

                            b1.Property<string>("Surname")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Surname");

                            b1.HasKey("ContractorEntityId");

                            b1.ToTable("Contractors");

                            b1.WithOwner()
                                .HasForeignKey("ContractorEntityId");
                        });

                    b.Navigation("Fullname");
                });

            modelBuilder.Entity("ContractorDocuments.Domain.Entities.Customers.ContractorPhoneEntity", b =>
                {
                    b.HasOne("ContractorDocuments.Domain.Entities.Customers.ContractorEntity", "Contractor")
                        .WithMany("Phones")
                        .HasForeignKey("ContractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contractor");
                });

            modelBuilder.Entity("ContractorDocuments.Domain.Entities.Customers.UserEntity", b =>
                {
                    b.OwnsOne("ContractorDocuments.Domain.ValueObjects.Fullname", "Fullname", b1 =>
                        {
                            b1.Property<Guid>("UserEntityId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Name");

                            b1.Property<string>("Surname")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Surname");

                            b1.HasKey("UserEntityId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserEntityId");
                        });

                    b.OwnsOne("ContractorDocuments.Domain.ValueObjects.PasswordHash", "Password", b1 =>
                        {
                            b1.Property<Guid>("UserEntityId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)")
                                .HasColumnName("Password");

                            b1.HasKey("UserEntityId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserEntityId");
                        });

                    b.Navigation("Fullname")
                        .IsRequired();

                    b.Navigation("Password")
                        .IsRequired();
                });

            modelBuilder.Entity("ContractorDocuments.Domain.Entities.Equipment.EquipmentEntity", b =>
                {
                    b.HasOne("ContractorDocuments.Domain.Entities.Catalogs.CategoryEntity", "Category")
                        .WithMany("Equipments")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ContractorDocuments.Domain.Entities.Materials.MaterialEntity", b =>
                {
                    b.HasOne("ContractorDocuments.Domain.Entities.Catalogs.CategoryEntity", "Category")
                        .WithMany("Materials")
                        .HasForeignKey("CategoryId");

                    b.HasOne("ContractorDocuments.Domain.Entities.Directory.MeasureEntity", null)
                        .WithMany("Materials")
                        .HasForeignKey("MeasureEntityId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ContractorDocuments.Domain.Entities.Projects.ProjectEntity", b =>
                {
                    b.HasOne("ContractorDocuments.Domain.Entities.Projects.ProjectContractEntity", "Contract")
                        .WithOne("Project")
                        .HasForeignKey("ContractorDocuments.Domain.Entities.Projects.ProjectEntity", "ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("ContractorDocuments.Domain.Entities.Projects.ProjectStageEntity", b =>
                {
                    b.HasOne("ContractorDocuments.Domain.Entities.Projects.ConstructStageEntity", "ConstructStage")
                        .WithMany("ProjectStages")
                        .HasForeignKey("ConstructStageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContractorDocuments.Domain.Entities.Projects.ProjectEntity", "Project")
                        .WithMany("Stages")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConstructStage");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ContractorDocuments.Domain.Entities.Projects.ProjectStageEquipmentEntity", b =>
                {
                    b.HasOne("ContractorDocuments.Domain.Entities.Equipment.EquipmentEntity", "Equipment")
                        .WithMany("ProjectStageEquipments")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContractorDocuments.Domain.Entities.Projects.ProjectStageEntity", "ProjectStage")
                        .WithMany("Equipments")
                        .HasForeignKey("ProjectStageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("ProjectStage");
                });

            modelBuilder.Entity("ContractorDocuments.Domain.Entities.Projects.ProjectStageExpenseEntity", b =>
                {
                    b.HasOne("ContractorDocuments.Domain.Entities.Projects.ProjectStageEntity", "ProjectStage")
                        .WithMany("Expenses")
                        .HasForeignKey("ProjectStageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectStage");
                });

            modelBuilder.Entity("ContractorDocuments.Domain.Entities.Projects.ProjectStageMaterialEntity", b =>
                {
                    b.HasOne("ContractorDocuments.Domain.Entities.Materials.MaterialEntity", "Material")
                        .WithMany("ProjectStageMaterials")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContractorDocuments.Domain.Entities.Projects.ProjectStageEntity", "ProjectStep")
                        .WithMany("Materials")
                        .HasForeignKey("ProjectStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("ProjectStep");
                });

            modelBuilder.Entity("ContractorDocuments.Domain.Entities.Catalogs.CategoryEntity", b =>
                {
                    b.Navigation("Equipments");

                    b.Navigation("Materials");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("ContractorDocuments.Domain.Entities.Customers.ContractorEntity", b =>
                {
                    b.Navigation("Phones");
                });

            modelBuilder.Entity("ContractorDocuments.Domain.Entities.Directory.MeasureEntity", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("ContractorDocuments.Domain.Entities.Equipment.EquipmentEntity", b =>
                {
                    b.Navigation("ProjectStageEquipments");
                });

            modelBuilder.Entity("ContractorDocuments.Domain.Entities.Materials.MaterialEntity", b =>
                {
                    b.Navigation("ProjectStageMaterials");
                });

            modelBuilder.Entity("ContractorDocuments.Domain.Entities.Projects.ConstructStageEntity", b =>
                {
                    b.Navigation("ProjectStages");
                });

            modelBuilder.Entity("ContractorDocuments.Domain.Entities.Projects.ProjectContractEntity", b =>
                {
                    b.Navigation("Project");
                });

            modelBuilder.Entity("ContractorDocuments.Domain.Entities.Projects.ProjectEntity", b =>
                {
                    b.Navigation("Stages");
                });

            modelBuilder.Entity("ContractorDocuments.Domain.Entities.Projects.ProjectStageEntity", b =>
                {
                    b.Navigation("Equipments");

                    b.Navigation("Expenses");

                    b.Navigation("Materials");
                });
#pragma warning restore 612, 618
        }
    }
}
